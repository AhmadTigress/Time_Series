# -*- coding: utf-8 -*-
"""Linear_Regression_With_Time_Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uMgHvB0KYbAnIbTcN0e4FDnwt765yP-S
"""

import pandas as pd

df = pd.read_csv(
    "/content/book_sales.csv",
    index_col='Date',
    parse_dates=['Date']
    ).drop('Paperback', axis=1)

df.head()

"""**Linear Regression with Time Series**

*Time-step features*
"""

import numpy as np

df['Time'] = np.arange(len(df.index))
df.head()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use("ggplot")
plt.rc(
    "figure",
    autolayout=True,
    figsize=(11, 4),
    titlesize=18,
    titleweight="bold"
)
plt.rc(
    "axes",
    labelweight="bold",
    labelsize="large",
    titleweight="bold",
    titlesize=16,
    titlepad=10
)
# %config InlineBackend.figure_format = 'retina'

fig, ax = plt.subplots()
ax.plot('Time', 'Hardcover', data=df, color='0.75')
ax = sns.regplot(x='Time', y='Hardcover', data=df, ci=None, scatter_kws=dict(color='0.25'))
ax.set_title('Time plot of Hardcover sales')

"""*Lag features*"""

df['Lag_1'] = df['Hardcover'].shift(1)  # This shifts the values down by 1 row
df = df.reindex(columns=['Hardcover', 'Lag_1'])   # Reorder or select specific columns in the DataFrame

df.head()

fig, ax = plt.subplots()
ax = sns.regplot(x='Lag_1', y='Hardcover', data=df, ci=None, scatter_kws=dict(color='0.25'))
ax.set_aspect('equal')
ax.set_title('Lag plot of Hardcover Sales')

"""**Example: Tunnnel Traffick**"""

# Commented out IPython magic to ensure Python compatibility.
from pathlib import Path
from warnings import simplefilter

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

simplefilter("ignore")    # ignore warnings to clean up output cells

# Set matplotlib defaults
plt.style.use("ggplot")
plt.rc("figure", autolayout=True, figsize=(11, 4))
plt.rc(
    "axes",
    labelweight="bold",
    labelsize="large",
    titleweight="bold",
    titlesize=14,
    titlepad=10,
)
plot_params = dict(
    color="0.75",
    style=".-",
    markeredgecolor="0.25",
    markerfacecolor="0.25",
    legend=False,
)
# %config InlineBackend.figure_format = 'retina'

# Load Tunnel Traffic dataset
tunnel = pd.read_csv("/content/tunnel.csv", parse_dates=["Day"])
tunnel = tunnel.set_index("Day")
tunnel.to_period()   # convert datetime index into a period index.

tunnel.head()

"""*Time-step feature*"""

df = tunnel.copy()
df['Time'] = np.arange(len(tunnel.index))
df.head()

from sklearn.linear_model import LinearRegression

# Training data
X = df.loc[:, ['Time']]  # features,Selects the 'Time' column as the input feature (X).
y = df.loc[:, 'NumVehicles']  # Targets, Selects the 'NumVehicles' column as the target/output (y)

# Train the model
model = LinearRegression()
model.fit(X, y)

# Store the fitted values as a time series with the same time index as the training data
y_pred = pd.Series(model.predict(X), index=X.index)  #  Predicts values using the trained model and stores them in a Series with the same index as X.

ax = y.plot(**plot_params)
ax = y_pred.plot(ax=ax, linewidth=3)
ax.set_title("Time Plot of Tunnel Traffick")

"""*Lag feature*"""

df['Lag_1'] = df['NumVehicles'].shift(1)
df.head()

from sklearn.linear_model import LinearRegression

X = df.loc[:, ['Lag_1']]
X.dropna(inplace=True)  # drop missing values in the feature set
y = df.loc[:, 'NumVehicles']
y, X = y.align(X, join='inner')   # drop corresponding values in target

model = LinearRegression()
model.fit(X, y)

y_pred = pd.Series(model.predict(X), index=X.index)

fig, ax = plt.subplots()
ax.plot(X['Lag_1'], y, '.', color='0.25')
ax.plot(X['Lag_1'], y_pred)
ax.set_aspect('equal')
ax.set_ylabel('NumVehicles')
ax.set_xlabel('Lag_1')
ax.set_title('Lag Plot of Tunnel Traffic')

ax = y.plot(**plot_params)
ax = y_pred.plot()

